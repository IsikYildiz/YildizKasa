//------------------------------------------------------------------------------
// <auto-generated>
//     Bu kod bir araç tarafından oluşturuldu.
//
//     Bu dosyada yapılacak değişiklikler hatalı davranışa neden olabilir ve
//     kod yeniden oluşturulursa kaybolur.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://example.com/payment", ConfigurationName="ServiceReference.PaymentServiceSoap")]
    public interface PaymentServiceSoap
    {
        
        // CODEGEN: İşlemin birden fazla dönüş değeri olduğundan ileti anlaşması oluşturuluyor.
        [System.ServiceModel.OperationContractAttribute(Action="http://example.com/payment/ProcessPayment", ReplyAction="*")]
        System.Threading.Tasks.Task<ServiceReference.ProcessPaymentResponse> ProcessPaymentAsync(ServiceReference.ProcessPaymentRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ProcessPayment", WrapperNamespace="", IsWrapped=true)]
    public partial class ProcessPaymentRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string cardNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int securityCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string expiryDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public string address;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public double amount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public int productCount;
        
        public ProcessPaymentRequest()
        {
        }
        
        public ProcessPaymentRequest(string cardNumber, int securityCode, string expiryDate, string address, double amount, int productCount)
        {
            this.cardNumber = cardNumber;
            this.securityCode = securityCode;
            this.expiryDate = expiryDate;
            this.address = address;
            this.amount = amount;
            this.productCount = productCount;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ProcessPaymentResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class ProcessPaymentResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public bool success;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string message;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public double shippingFee;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public double totalAmount;
        
        public ProcessPaymentResponse()
        {
        }
        
        public ProcessPaymentResponse(bool success, string message, double shippingFee, double totalAmount)
        {
            this.success = success;
            this.message = message;
            this.shippingFee = shippingFee;
            this.totalAmount = totalAmount;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface PaymentServiceSoapChannel : ServiceReference.PaymentServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class PaymentServiceSoapClient : System.ServiceModel.ClientBase<ServiceReference.PaymentServiceSoap>, ServiceReference.PaymentServiceSoap
    {
        
        /// <summary>
        /// Hizmet uç noktasını yapılandırmak için bu kısmi metodu uygulayın.
        /// </summary>
        /// <param name="serviceEndpoint">Yapılandırılacak uç nokta</param>
        /// <param name="clientCredentials">İstemci kimlik bilgileri</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PaymentServiceSoapClient() : 
                base(PaymentServiceSoapClient.GetDefaultBinding(), PaymentServiceSoapClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.PaymentServiceSoap.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PaymentServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(PaymentServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), PaymentServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PaymentServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PaymentServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PaymentServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PaymentServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PaymentServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ProcessPaymentResponse> ProcessPaymentAsync(ServiceReference.ProcessPaymentRequest request)
        {
            return base.Channel.ProcessPaymentAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.PaymentServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("\'{0}\' adlı uç nokta bulunamadı.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.PaymentServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:3000/payment");
            }
            throw new System.InvalidOperationException(string.Format("\'{0}\' adlı uç nokta bulunamadı.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PaymentServiceSoapClient.GetBindingForEndpoint(EndpointConfiguration.PaymentServiceSoap);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PaymentServiceSoapClient.GetEndpointAddress(EndpointConfiguration.PaymentServiceSoap);
        }
        
        public enum EndpointConfiguration
        {
            
            PaymentServiceSoap,
        }
    }
}
